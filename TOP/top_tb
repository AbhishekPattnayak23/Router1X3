`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: Maven Silicon
// Engineer: Abhishek Pattnayak
// 
// Create Date: 04/09/2024 07:21:18 PM
// Design Name: Top module testbench
// Module Name: router_top_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module router_top_tb();
reg clk,rstn,read_enb_0,read_enb_1,read_enb_2,pkt_valid;
reg [7:0] data_in;
wire [7:0]data_out_0,data_out_1,data_out_2;
wire valid_out_0,valid_out_1,valid_out_2,err,busy;

router_top DUT(clk,rstn,read_enb_0,read_enb_1,read_enb_2, data_in,pkt_valid,data_out_0,data_out_1,data_out_2,
valid_out_0,valid_out_1,valid_out_2,err,busy);

initial
    begin
    clk=1'b1;
    forever
    #5 clk=~clk;
    end
    
task reset;
    begin
        @(negedge clk)
            rstn=1'b0;
        @(negedge clk)
            rstn=1'b1;
    end 
endtask

task initialize;
      begin
        {read_enb_0,read_enb_1,read_enb_2,pkt_valid}=0;
        data_in=8'd0;
      end 
endtask

//packet-1 payload length = 14

task packet1;
reg [7:0] payload_data,header,parity;
reg [5:0] payload_len;
reg [1:0] addr;
integer i;
    begin
        @(negedge clk);
            wait(~busy)    //when busy is low, router will accept the new byte of data
            
        @(negedge clk);
        payload_len=6'd14;
        addr = 2'b01;
        header = {payload_len,addr};
        parity = 0;
        data_in=header;
        pkt_valid=1;
        parity = parity^header;     //packet parity
        @(negedge clk)
        wait(~busy)
            for(i=0;i<payload_len;i=i+1)
                begin
                    @(negedge clk)
                        wait(~busy)
                        payload_data = {$random}%256;
                        data_in=payload_data;
                        parity = parity ^ payload_data;
                 end 
                    @(negedge clk)
                    wait(~busy)
                    pkt_valid=0;
                    data_in=parity;      //this is the packet parity that is send from the source along with packet
        end                             // here source is testbench
endtask              

initial
    begin
        initialize;
        reset;
        repeat(3)
        @(negedge clk)
        packet1;
        @(negedge clk)
        read_enb_1=1;
        wait(~valid_out_1)
        @(negedge clk)
        read_enb_1=0;
    end 
endmodule
