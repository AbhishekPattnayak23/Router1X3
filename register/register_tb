`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company:  maven silicon
// Engineer: Abhishek Pattnayak
// 
// Create Date: 04/05/2024 09:23:12 AM
// Design Name: Regsiter testbench
// Module Name: router_reg_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module router_reg_tb();
reg clk,rstn,pkt_valid,fifo_full,detect_add,ld_state,laf_state,full_state,lfd_state,rst_int_reg;
reg [7:0]data_in;
wire err,parity_done,low_packet_valid;
wire [7:0]dout;

router_reg DUT(clk,rstn,pkt_valid,data_in,fifo_full,detect_add,
                  ld_state,laf_state,full_state,lfd_state,rst_int_reg,err,
                  parity_done,low_packet_valid,dout);
                  
//clock generation

initial
    begin
        clk=1'b0;
        forever
        #5
        clk=~clk;
    end 
    
//reset 

task reset;
    begin   
    @(negedge clk)
        rstn=1'b0;
    @(negedge clk)
        rstn=1'b1;                             
    end
endtask

task initialize;
    begin
        {pkt_valid,fifo_full,detect_add,ld_state,laf_state,full_state,lfd_state,rst_int_reg}=0;
    end 
 endtask 
 
 
 //good packet
task good_packet_generation;

reg[7:0]payload_data,parity1,header1;
reg[5:0]payload_len;
reg[1:0]addr;
integer i;

begin
 @(negedge clk)
    payload_len=6'd5;
    addr=2'b10;
    pkt_valid=1;
    detect_add=1;
    header1={payload_len,addr};
    parity1=0^header1;
    data_in=header1;
    @(negedge clk);
    detect_add=0;
    lfd_state=1;
    full_state=0;
    fifo_full=0;
    laf_state=0;
    for(i=0;i<payload_len;i=i+1)
        begin
            @(negedge clk);
            lfd_state=0;
            ld_state=1;
            payload_data={$random}%256;
            data_in=payload_data;
            parity1=parity1^data_in;
        end
    @(negedge clk);
    pkt_valid=0;
    data_in=parity1;
    @(negedge clk);
    ld_state=0;
    end
 endtask
 
 
task bad_packet_generation;

reg[7:0]payload_data,parity1,header1;
reg[5:0]payload_len;
reg[1:0]addr;
integer i;

begin
 @(negedge clk)
    payload_len=6'd5;
    addr=2'b10;
    pkt_valid=1;
    detect_add=1;
    header1={payload_len,addr};
    parity1=0^header1;
    data_in=header1;
    @(negedge clk);
    detect_add=0;
    lfd_state=1;
    full_state=0;
    fifo_full=0;
    laf_state=0;
    for(i=0;i<payload_len;i=i+1)
        begin
            @(negedge clk);
            lfd_state=0;
            ld_state=1;
            payload_data={$random}%256;
            data_in=payload_data;
            parity1=parity1^data_in;
        end
    @(negedge clk);
    pkt_valid=0;
    data_in=46;
    @(negedge clk);
    ld_state=0;
    end
 endtask
 
 initial
    begin
        reset;
        initialize;
        good_packet_generation;
        reset;
        bad_packet_generation;
        #30
        $finish;
    end 
       
endmodule
